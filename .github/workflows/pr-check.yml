name: PR Check

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  quick-check:
    name: Quick Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        # Checkout the PR head commit
        ref: ${{ github.event.pull_request.head.sha }}
        
    - name: Install tools
      run: |
        sudo apt-get update -q
        sudo apt-get install -y clang-format cppcheck
        
    - name: Check formatting
      id: format-check
      run: |
        echo "üé® Checking code format..."
        if make fmt-check; then
          echo "format_status=‚úÖ Passed" >> $GITHUB_OUTPUT
        else
          echo "format_status=‚ùå Failed" >> $GITHUB_OUTPUT
          echo "format_failed=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Quick static analysis
      id: static-check
      run: |
        echo "üîç Running quick static analysis..."
        if make check; then
          echo "static_status=‚úÖ Passed" >> $GITHUB_OUTPUT
        else
          echo "static_status=‚ùå Failed" >> $GITHUB_OUTPUT
          echo "static_failed=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Build test
      id: build-check
      run: |
        echo "üèóÔ∏è Testing build..."
        if make clean && make all; then
          echo "build_status=‚úÖ Passed" >> $GITHUB_OUTPUT
        else
          echo "build_status=‚ùå Failed" >> $GITHUB_OUTPUT
          echo "build_failed=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Comment on PR
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const formatStatus = '${{ steps.format-check.outputs.format_status }}';
          const staticStatus = '${{ steps.static-check.outputs.static_status }}';
          const buildStatus = '${{ steps.build-check.outputs.build_status }}';
          
          const formatFailed = '${{ steps.format-check.outputs.format_failed }}' === 'true';
          const staticFailed = '${{ steps.static-check.outputs.static_failed }}' === 'true';
          const buildFailed = '${{ steps.build-check.outputs.build_failed }}' === 'true';
          
          let body = `## ü§ñ PR Quality Check Results\n\n`;
          body += `| Check | Status |\n`;
          body += `|-------|--------|\n`;
          body += `| Code Formatting | ${formatStatus} |\n`;
          body += `| Static Analysis | ${staticStatus} |\n`;
          body += `| Build Test | ${buildStatus} |\n\n`;
          
          if (formatFailed) {
            body += `### ‚ùå Code Formatting Issues\n`;
            body += `Your code needs formatting. Please run:\n`;
            body += `\`\`\`bash\nmake fmt\n\`\`\`\n\n`;
          }
          
          if (staticFailed) {
            body += `### ‚ö†Ô∏è Static Analysis Warnings\n`;
            body += `Please review the static analysis warnings above.\n\n`;
          }
          
          if (buildFailed) {
            body += `### üí• Build Failed\n`;
            body += `Please fix the build errors before merging.\n\n`;
          }
          
          if (!formatFailed && !staticFailed && !buildFailed) {
            body += `### üéâ All checks passed!\n`;
            body += `Your PR looks good and is ready for review.\n\n`;
          }
          
          body += `---\n`;
          body += `*This comment was automatically generated by GitHub Actions*`;
          
          // Find existing comment to update or create new one
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('PR Quality Check Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
          
    - name: Set status
      if: always()
      run: |
        if [ "${{ steps.format-check.outputs.format_failed }}" = "true" ] || 
           [ "${{ steps.build-check.outputs.build_failed }}" = "true" ]; then
          echo "‚ùå PR check failed"
          exit 1
        else
          echo "‚úÖ PR check passed"
        fi
