name: CI

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  format-validation:
    name: 🎨 Code Format Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install clang-format
      run: |
        sudo apt-get update -q
        sudo apt-get install -y clang-format
        echo "✅ clang-format installed"
        clang-format --version
        
    - name: Verify .clang-format exists
      run: |
        if [ -f .clang-format ]; then
          echo "✅ .clang-format configuration found"
          head -10 .clang-format
        else
          echo "❌ .clang-format not found"
          exit 1
        fi
        
    - name: Check code formatting
      run: |
        echo "🔍 Checking code format..."
        make fmt-check
        echo "✅ Code format validation passed"

  linting:
    name: 🧹 Code Linting  
    runs-on: ubuntu-latest
    needs: format-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install linting tools
      run: |
        sudo apt-get update -q
        sudo apt-get install -y clang-tidy
        echo "✅ clang-tidy installed"
        clang-tidy --version
        
    - name: Run linting (allow warnings)
      run: |
        echo "🧹 Running lint checks..."
        make lint || echo "⚠️ Lint warnings found (non-critical)"
        echo "✅ Linting completed"

  static-analysis:
    name: 🔬 Static Analysis
    runs-on: ubuntu-latest
    needs: format-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install cppcheck
      run: |
        sudo apt-get update -q
        sudo apt-get install -y cppcheck
        echo "✅ cppcheck installed"
        cppcheck --version
        
    - name: Run static analysis
      run: |
        echo "🔬 Running static analysis..."
        make check
        echo "✅ Static analysis completed"

  # Build testing - disabled until source implementation
  # build-test:
  #   name: 🏗️ Build Test
  #   runs-on: ubuntu-latest
  #   needs: [format-validation, linting, static-analysis]
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Install build dependencies
  #     run: |
  #       sudo apt-get update -q
  #       sudo apt-get install -y build-essential make
  #       
  #   - name: Test library build
  #     run: |
  #       echo "🏗️ Testing library build..."
  #       make clean
  #       make all
  #       echo "✅ Library build successful"

  # Test execution - disabled until test implementation  
  # test-execution:
  #   name: 🧪 Test Execution
  #   runs-on: ubuntu-latest
  #   needs: build-test
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Build and run tests
  #     run: |
  #       echo "🧪 Building and running tests..."
  #       make test
  #       echo "✅ All tests passed"

  summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [format-validation, linting, static-analysis]
    if: always()
    
    steps:
    - name: Generate CI summary
      run: |
        echo "📊 CI Pipeline Summary"
        echo "====================="
        echo "Format Validation: ${{ needs.format-validation.result }}"
        echo "Linting: ${{ needs.linting.result }}"
        echo "Static Analysis: ${{ needs.static-analysis.result }}"
        echo ""
        
        if [ "${{ needs.format-validation.result }}" = "success" ] && \
           [ "${{ needs.linting.result }}" = "success" ] && \
           [ "${{ needs.static-analysis.result }}" = "success" ]; then
          echo "✅ All active CI checks passed!"
          echo "🚀 Ready for deployment"
        else
          echo "❌ Some CI checks failed"
          echo "📝 Please review the failed jobs above"
          exit 1
        fi
